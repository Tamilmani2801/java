Stream API:
----------
    -It is an interface
    -used to store the copy of data and do the programmer operations in the copy in order save the original data.
    -import java.util.stream.Stream

eg)
---
import java.util.List;
import java.util.Arrays;
import java.util.stream.Stream;

class UsingStream
{
    public static void main(String[] args)
    {
        List<Integer> list = Arrays.asList(3,4,5,6,7,8,9);

        //creating streams and storing the list in streams;

        Stream<Integer> s1 = list.stream();

        s1.forEach(n->System.out.println(n));
    }
}
================================================================
Note:
-----
    once a stream has been created and we do any thing like printing the stream then again we cannot print the same stream.

eg)
---
import java.util.List;
import java.util.Arrays;
import java.util.stream.Stream;

class UsingStream
{
    public static void main(String[] args)
    {
        List<Integer> list = Arrays.asList(3,4,5,6,7,8,9);

        //creating streams and storing the list in streams;

        Stream<Integer> s1 = list.stream();

        
        s1.forEach(n->System.out.println(n));
        s1.forEach(n->System.out.println(n));
    }
}


The above program will throw error because two times same stream has been printed eventhough we use streams due to several inbuilt methods
==========================================================================================================================================

Features in Stream:
-------------------
i)A stream is not a data structure instead it takes input from the Collections, Arrays or I/O channels.
ii)Streams donâ€™t change the original data structure, they only provide the result as per the pipelined methods.
iii)Each intermediate operation is lazily executed and returns a stream as a result, hence various intermediate
operations can be pipelined.Terminal operations mark the end of the stream and return the result.

intermediate operations:
-------------------------
1)map()
2)filter()  -->it is found in predicate class
3)sorted()

Terminal operations:
--------------------
1)collect()
2)forEach()
3)reduce()


eg)
----
import java.util.List;
import java.util.Arrays;
import java.util.stream.Stream;

class UsingStream
{
    public static void main(String[] args)
    {
        List<Integer> list = Arrays.asList(3,4,5,6,7,8,9);

        //creating streams and storing the list in streams;

        Stream<Integer> s1 = list.stream();
        Stream<Integer> s2 = s1.filter(n -> n%2 ==0);
        Stream<Integer> s3 = s2.map(n -> n*2);
        int result = s3.reduce(0,(c,e)->c+e);

        System.out.println(result);
        
        
    }
}

The above example applying all methods at a time:
---------------------------------------------------
eg)
-----
import java.util.List;
import java.util.Arrays;
import java.util.stream.Stream;

class UsingStream
{
    public static void main(String[] args)
    {
        List<Integer> list = Arrays.asList(3,4,5,6,7,8,9);

        int result = list.stream().filter(n->n%2==0).map(n->n*2).reduce(0,(c,e)->c+e);

        System.out.println(result);
        
    }
==================================================================================================

points to remember:
----------------------
1)How to convert array to stream?
        String[] arr = {"tamilmani","shoban","prathap"};
        Stream<String> result = Arrays.stream(arr);
==============================================================
2)How to convert List to Stream?
        List<String> myList = new ArrayList<>();
        Stream<String> streamFromList = myList.stream();
==============================================================
Using stream there are several use cases:
----------------------------------------
        In stream there is a concept called Collectors which help to several process in a data using stream.}

